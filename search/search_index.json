{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dynatrace Observability Lab: NetFlow Data Ingest","text":"<p>Support Policy</p> <p>This is a demo project created by the Developer Relations team at Dynatrace, showcasing integrations with open source technologies.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p> <p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p> <p>Select Execution Mode</p> <p>Please choose a way to run this demo. When you have chosen, leave the selection toggled as this ensure the correct instructions are given throughout this tutorial.</p> Run in CloudRun Locally <p>This is the easiest option. A new tab will open in your browser and everything necessary will be pre-installed.</p> <p>This option uses GitHub Codespaces and is usually free (GitHub provides credits each month).</p> <p>Use this option if you want to run this demo on your own machine.</p> <p> M3 and M4 Macs seem to currently have issues with Docker. We are investigating. If you have issues, choose the \"Run in Cloud\" option for now.</p> <p>To make this work, you'll need the following installed:</p> <ul> <li>Visual Studio Code</li> <li>The Microsoft Dev Containers extension in Visual Studio Code</li> <li> <p>The Dev Containers CLI</p> </li> <li> <p>Ability to clone this repository locally (if you don't know what this means, use the \"run in cloud\" option)</p> </li> </ul> <p>This hands on Observability Lab will show how to ingest NetFlow data into Dynatrace as log entries via the Dynatrace collector.</p> <p>A dummy NetFlow producing device (nflow-generator) will be used for this demo. In reality, your devices would be configured to send flow data to the Dynatrace collector.</p> <p>nflow-generator will be configured to send flow data to the Dynatrace collector. The Dynatrace collector will be configured to send the data to Dynatrace.</p> <p>More than just NetFlow</p> <p>In this demo we use NetFlow data but the Dynatrace collector, and more specifically the netflow receiver inside the collector, also supports IPFIX and sFlow.</p> <p>Dynatrace Support</p> <p>The Dynatrace OpenTelemetry collector distribution is recommended as a best practice for any deployment involving OpenTelemetry.</p> <p>It is also fully supported meaning you can raise support tickets.</p> <p></p> <ul> <li>Click here to begin </li> </ul>"},{"location":"cleanup/","title":"5. Cleanup","text":"<p>To cleanup resources, go to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API token.</p>"},{"location":"getting-started/","title":"2. Getting Started","text":"<p>You will need to collect some information before you can begin.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Dynatrace tenant (sign up for a free trial)</li> <li>A Dynatrace API token with <code>logs.ingest</code> permissions (see below)</li> </ul>"},{"location":"getting-started/#format-url","title":"Format URL","text":"<p>Make a note of your Dynatrace tenant ID. It is the first bit of your URL (eg. abc12345 in the following examples):</p> <pre><code>https://abc12345.live.dynatrace.com\nhttps://abc12345.apps.dynatrace.com\n</code></pre>"},{"location":"getting-started/#environment-type","title":"Environment Type","text":"<p>Make a note of your environment type. The above environment type is <code>live</code>. If in doubt, use <code>live</code>.</p>"},{"location":"getting-started/#create-api-token","title":"Create API Token","text":"<p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code> and search for <code>access tokens</code></li> <li>Create a new access token with the <code>logs.ingest</code> permission</li> </ul> <p>You have all the necessary details and are ready to get started.</p> <ul> <li>Click here to continue </li> </ul>"},{"location":"resources/","title":"6. Resources","text":"<ul> <li> Prefer to use fluentbit or fluentd? Check out the documentation</li> <li> Watch: Network Observability with Dynatrace</li> </ul>"},{"location":"start-demo/","title":"3. Start Demo","text":""},{"location":"start-demo/#start-demo","title":"Start Demo","text":"<p>Enter Required Information</p> <p>During the next step you will be prompted for some details.</p> <p>Enter the relevant details in the GitHub form.</p> <p>Click this button to launch the demo in a new tab.</p> Run in CloudRun Locally <p>Enter Required Information</p> <p>During the next step you will be prompted for some details.</p> <p>Enter the relevant details in the GitHub form.</p> <p>Click this button to launch the demo in a new tab.</p> <p></p> <ul> <li>Clone the repository to your local machine</li> </ul> <pre><code>git clone https://github.com/dynatrace/demo-netflow\n</code></pre> <ul> <li>Open the folder in Visual Studio code</li> <li>Ensure the Microsoft Dev Containers extension and Dev Containers CLI are installed in VSCode</li> <li>Open a new terminal in VSCode and set your environment variables as appropriate:</li> </ul> <pre><code>set DT_ENVIRONMENT_ID=abc12345\nset DT_ENVIRONMENT_TYPE=live\nset DT_API_TOKEN=dt0c01.******.***********\n</code></pre> <ul> <li>Start Docker / Podman</li> <li>Create the environment</li> </ul> <pre><code>devcontainer up\n</code></pre> <p>It will take a few moments but you should see:</p> <pre><code>{\"outcome\":\"success\",\"containerId\":\"...\",\"remoteUser\":\"root\",\"remoteWorkspaceFolder\":\"/workspaces/obslab-jmeter\"}\n</code></pre> <ul> <li>Connect to the demo environment. This will launch a new Visual Studio Code window</li> </ul> <pre><code>devcontainer open\n</code></pre> <p>In the new Visual Studio code window, open a new terminal and continue with the tutorial.</p>"},{"location":"start-demo/#start-the-system","title":"Start the system","text":"<p>You will now start two containers on the same Docker network:</p> <ol> <li>Dynatrace OpenTelemetry collector: Listens for incoming NetFlow data and sends it onwards to Dynatrace</li> <li>nflow-generator: Dummy device which generates the netflow data</li> </ol>"},{"location":"start-demo/#create-a-new-network","title":"Create a new Network","text":"<p>First, create a new docker network so both containers are on the same network and thus nflow-generator can find and send data to the collector:</p> <pre><code>docker network create shared\n</code></pre>"},{"location":"start-demo/#start-the-collector","title":"Start the Collector","text":"<p>Start the collector by running the command as-is (leave this running):</p> <pre><code>docker run --rm -p 2055:2055 \\\n  -e DT_ENDPOINT=https://$DT_ENVIRONMENT_ID.live.dynatrace.com/api/v2/otlp \\\n  -e DT_API_TOKEN=$DT_API_TOKEN \\\n  -v .:/app \\\n  --name dtcol \\\n  --network shared \\\n  ghcr.io/dynatrace/dynatrace-otel-collector/dynatrace-otel-collector:0.30.0 --config=app/config.yaml\n</code></pre> <p>The configuration of the collector can be found here. The collector is configured to listen for netflow data on <code>2055</code> then export it simultaneously to both <code>debug</code> and Dynatrace via the <code>OTLP HTTP</code> protocol. The debug output prints it to stdout (look at the collector terminal for output).</p> <p>Remove debug in production</p> <p>Debug logging is used here but is not recommended for production. Remove <code>debug</code> from the <code>exporters</code> block in production.</p>"},{"location":"start-demo/#start-nflow-generator","title":"Start nflow-generator","text":"<p>Open a new terminal window and start the NetFlow generator device which will send data to the collector:</p> <pre><code>docker run -it --rm \\\n  --network shared \\\n  --name nflowgen \\\n  networkstatic/nflow-generator -t dtcol -p 2055\n</code></pre>"},{"location":"start-demo/#view-debug-data","title":"View Debug Data","text":"<p>Open the collector terminal window (the first one launched). You should now see data flowing through the collector on the way to Dynatrace.</p> <pre><code>LogRecord #1\nObservedTimestamp: 2025-06-12 05:10:32.532212841 +0000 UTC\nTimestamp: 2025-06-12 05:10:31.965015972 +0000 UTC\nSeverityText:\nSeverityNumber: Unspecified(0)\nBody: Empty()\nAttributes:\n     -&gt; source.address: Str(172.16.50.10)\n     -&gt; source.port: Int(0)\n     -&gt; destination.address: Str(132.12.130.10)\n     -&gt; destination.port: Int(0)\n     -&gt; network.transport: Str(icmp)\n     -&gt; network.type: Str(ipv4)\n     -&gt; flow.io.bytes: Int(51)\n     -&gt; flow.io.packets: Int(44)\n     -&gt; flow.type: Str(netflow_v5)\n     -&gt; flow.sequence_num: Int(19)\n     -&gt; flow.time_received: Int(1749705032532212841)\n     -&gt; flow.start: Int(1749705031965015972)\n     -&gt; flow.end: Int(1749705032237015972)\n     -&gt; flow.sampling_rate: Int(0)\n     -&gt; flow.sampler_address: Str(10.89.1.3)\nTrace ID:\nSpan ID:\nFlags: 0\n</code></pre> <ul> <li>Click here to continue </li> </ul>"},{"location":"view-data/","title":"4. View Data","text":"<p>It is time to view the data in Dynatrace.</p> <p>Data Ingest</p> <p>It may take up to 30 seconds for data to appear in Dynatrace. Just re-run the command below after a minute or so.</p> <p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code> search for <code>notebooks</code></li> <li>Add a new section for <code>DQL</code></li> <li>Search for:</li> </ul> <pre><code>fetch logs\n| filter exists(flow.type)\n</code></pre> <p></p>"},{"location":"view-data/#congratulations","title":"Congratulations","text":"<p>You have succesfully ingested NetFlow data into Dynatrace.</p> <p>This Observability lab is now complete.</p> <p>Your Feedback</p> <p>We're always looking for ways to improve your experience.</p> <p>Please take 5 seconds to send feedback via the button on the bottom right of the screen.</p> <ul> <li>Click here to cleanup your environment </li> </ul>"},{"location":"snippets/codespace-details-warning-box/","title":"Codespace details warning box","text":"<p>Enter Required Information</p> <p>During the next step you will be prompted for some details.</p> <p>Enter the relevant details in the GitHub form.</p>"},{"location":"snippets/disclaimer/","title":"Disclaimer","text":"<p>Support Policy</p> <p>This is a demo project created by the Developer Relations team at Dynatrace, showcasing integrations with open source technologies.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"snippets/feedback-invitation/","title":"Feedback invitation","text":"<p>Your Feedback</p> <p>We're always looking for ways to improve your experience.</p> <p>Please take 5 seconds to send feedback via the button on the bottom right of the screen.</p>"},{"location":"snippets/select-execution-mode/","title":"Select execution mode","text":"<p>Select Execution Mode</p> <p>Please choose a way to run this demo. When you have chosen, leave the selection toggled as this ensure the correct instructions are given throughout this tutorial.</p> Run in CloudRun Locally <p>This is the easiest option. A new tab will open in your browser and everything necessary will be pre-installed.</p> <p>This option uses GitHub Codespaces and is usually free (GitHub provides credits each month).</p> <p>Use this option if you want to run this demo on your own machine.</p> <p> M3 and M4 Macs seem to currently have issues with Docker. We are investigating. If you have issues, choose the \"Run in Cloud\" option for now.</p> <p>To make this work, you'll need the following installed:</p> <ul> <li>Visual Studio Code</li> <li>The Microsoft Dev Containers extension in Visual Studio Code</li> <li> <p>The Dev Containers CLI</p> </li> <li> <p>Ability to clone this repository locally (if you don't know what this means, use the \"run in cloud\" option)</p> </li> </ul>"},{"location":"snippets/start-demo-run-in-cloud/","title":"Start demo run in cloud","text":"<p>Click this button to launch the demo in a new tab.</p> <p></p>"},{"location":"snippets/start-demo-run-locally/","title":"Start demo run locally","text":"<ul> <li>Clone the repository to your local machine</li> </ul> <pre><code>git clone https://github.com/dynatrace/demo-netflow\n</code></pre> <ul> <li>Open the folder in Visual Studio code</li> <li>Ensure the Microsoft Dev Containers extension and Dev Containers CLI are installed in VSCode</li> <li>Open a new terminal in VSCode and set your environment variables as appropriate:</li> </ul> <pre><code>set DT_ENVIRONMENT_ID=abc12345\nset DT_ENVIRONMENT_TYPE=live\nset DT_API_TOKEN=dt0c01.******.***********\n</code></pre> <ul> <li>Start Docker / Podman</li> <li>Create the environment</li> </ul> <pre><code>devcontainer up\n</code></pre> <p>It will take a few moments but you should see:</p> <pre><code>{\"outcome\":\"success\",\"containerId\":\"...\",\"remoteUser\":\"root\",\"remoteWorkspaceFolder\":\"/workspaces/obslab-jmeter\"}\n</code></pre> <ul> <li>Connect to the demo environment. This will launch a new Visual Studio Code window</li> </ul> <pre><code>devcontainer open\n</code></pre> <p>In the new Visual Studio code window, open a new terminal and continue with the tutorial.</p>"},{"location":"snippets/view-code/","title":"View code","text":"<p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p>"}]}